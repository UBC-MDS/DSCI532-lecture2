---
title: "L2 - Design the user Interface"
institute: "Data Visualization II - DSCI 532 - MDS 2022/23"
format:
  revealjs:
    logo: img/mdslogo.png
    incremental: true  # bullets one by one 
    smaller: true
    scrollable: true
    theme: custom.scss
    slide-number: true
    show-slide-number: print
    chalkboard: true
---

## Lecture 2
1. Steps to create a production-grade app
2. Why is user center design so important?
3. How to structure your Shiny app? Layouts, tabs, navbar.
4. How to add themes and style to your Shiny app?


---

## Design UI references

Fay, C., Rochette, S., Guyader, V., & Girard, C. (2021). Engineering Production-Grade Shiny Apps. Chapman and Hall/CRC. 

- [Don't rush into coding](https://engineering-shiny.org/dont-rush-into-coding.html)

-   [UX user experience](https://engineering-shiny.org/ux-matters.html)

-   [Building an "ispum-app"](https://engineering-shiny.org/building-ispum-app.html)

---

## Today's goal
#### Design and build a Shiny app UI

Chapter 6 - [Layout, themes, HTML](https://mastering-shiny.org/action-layout.html#action-layout) - Mastering Shiny 

---

## DSCI 532 Overview

![](img/532-overview-2023.png)


# 1. Steps to create a production-grade app {background-color="#F1FFFA"}


---

## What is a “production-grade” app?
These three properties impact two specific groups: users and the developers:

* It is **used**, even if only by one person.

* It is **relied** upon by its user(s).

* It has **real life impact** if something goes wrong.





:::footer
Extracted from [Engineering Production-Grade Shiny Apps book](https://engineering-shiny.org/index.html#what-is-production)]
:::

---

## The road to a production-grade app

:::{.fragment .highlight-blue}
1. Motivation and purpose
2. Select the results/metrics that you want for your target audience
3. Choose presentation method and interactivity 
4. Description of your app and sketch
:::
5. Write the code of the app following a workflow
6. Ensure the app's reproducibility and deploy it 


::: footer
Adapted from: Rasmussen, N. H., Bansal, M., & Chen, C. Y. (2009). Business dashboards: a visual catalog for design and deployment. John Wiley & Sons.
:::


---

# Why is user center design so important?

---

## Develop for your users

-   As data scientists, we have the tendency to be focused on the **back-end**, i.e. the server part of the application

. . .

-   **do not underestimate the necessity for a successful front-end** 

::: footer
[UX-matters - Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/ux-matters.html)
:::




# **Step1**. Motivation and purpose  {background-color="#F1FFFA"}

---

## Step 1. Motivation and purpose
**A.** Get to know well your *Persona* (target audience)
**B.** Understand the the data
**C.** Define the research question and usage scenario 

---

## Step 1. Motivation and purpose
#### A. Get to know well your *Persona* (target audience)

A *persona* is a character that represents the “typical” behavior and traits for a group of users that will interact with your product.


![](img/Personas.jpg){fig-align='center'}



:::footer
[Building *personas* - Chapter 7 - Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/dont-rush-into-coding.html#building-personas)
:::


---

## Step 1. Motivation and purpose
#### A. Get to know well your *Persona* (target audience)

* While building your application, **you can think about how each persona will interact with a given feature**: 
   - Will they use it? 
   - Will they understand it? 
   - Do we need to add extra information?

:::footer
[Building *personas* - Chapter 7 - Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/dont-rush-into-coding.html#building-personas)
:::

---

## Step 1. Motivation and purpose
#### A. Get to know well your *Persona* (target audience)

**Human center-design** 

Develop ~~for your users~~ for humans


::: footer
[What is Human-center design? (Video)](https://www.youtube.com/watch?v=YnZJ6Dsou0w) Video Spark Works
:::

---

## Step 1. Motivation and purpose
#### B. Understand the data

- Are there missing values?
- Is there some pre-processing of the data needed?
- What are the variables we are interested to display?

---

## Step 1. Motivation and purpose
#### B. Understand the data
**How often the data will be updated?**



| Category    | Purpose                                     | Update frecquency | Interactivity |
|-------------|---------------------------------------------|-------------------|---------------|
| Strategic   | See and decide or question                  | Moderate          | Low           |
| Operational | See and act                                 | High              | Moderate      |
| Analytical  | See and question, explore what-if scenarios | Low               | High          |

: Dashboard classification



::: footer
Modified from: [Pappas, L., Whitman, L. (2011). Riding the Technology Wave: Effective Dashboard Data Visualization. In: Smith, M.J., Salvendy, G. (eds) Human Interface and the Management of Information. Interacting with Information. Human Interface 2011. Lecture Notes in Computer Science, vol 6771. Springer, Berlin, Heidelberg.]( https://doi.org/10.1007/978-3-642-21793-7_29)
:::


---

## Step 1. Motivation and purpose
#### C. Define the research question and usage scenario.

- [Milestone 1](https://pages.github.ubc.ca/mds-2022-23/DSCI_532_viz-2_students/materials/release/milestone1/milestone1.html)

---

# Step 2. Select the results/metrics that you want for your target audience

---

## Step 2. Select the results/metrics that you want for your target audience

For example, 

* "Percentage of completion of product"   
* "Revenue increase (%) by year"   
* "Number of daily COVID-19 cases by country"   
* "Percentage of reduction of COVID-19 cases"   

::: footer
Based in: Rasmussen, N. H., Bansal, M., & Chen, C. Y. (2009). Business dashboards: a visual catalog for design and deployment. John Wiley & Sons.
:::

---

# Step 3. Choose presentation method and interactivity 

---

## Step 3. Choose presentation method and interactivity 

**A.** Components (plots, maps, notifications, text).
**B.** Design dashboard layout.

---

## Step 3. Choose presentation method and interactivity 
#### A. Components 

For example:

* "Percentage of completion of product" **-> Plot**  
  
* "revenue increase (%) by year" **-> Plot**  
  
* "Number of daily COVID-19 cases by country" **-> Map**  
  
* "Percentage of reduction of COVID-19 cases" **-> Text**

---

## Step 3. Choose presentation method and interactivity 
#### A. Components 
**What library to use to include...?**
* Plots   
* Gauges  
* Alerts / Notifications  
* Maps  
* Text boxes 
* Reports  


---

## Plots 
We are going to learn more in future lectures

- Could not be interactive too
- [Interactive plots - the R graph Gallery](https://r-graph-gallery.com/interactive-charts.html)
- [Animation plots - the R graph Gallery](https://r-graph-gallery.com/animation.html)

---

## Plots
#### Threadholds / highlights

- [`gghighlights`](https://cran.r-project.org/web/packages/gghighlight/vignettes/gghighlight.html)

![](img/example-plot-label.png)

---

## Plots
##### Thresholds / period selection

![](img/example-plot-line.png){fig-align='center'}

::: footer
[`Customized Data Visualization in ggplot2` - Allison Horst](https://allisonhorst.github.io/eds221-day8-comp/data_viz.html)
:::

---

## Maps

 "Number of daily COVID cases by province" -> **Map** -> **`leaflet` library**

*"Using this library we can add labels that will be revealed when the user interacts with the app..."*

- [COVID-19 Tracker app](https://vac-lshtm.shinyapps.io/ncov_tracker/?_ga=2.52417641.1170288496.1676142911-1701640703.1675377384)




## Step 3. Choose presentation method and interactivity 
#### B. Desing dashboard layout
-   Accessibility
-   Fonts and size
-   Colors / themes

---

## Step 3. Choose presentation method and interactivity 
#### B. Desing dashboard layout
-   Do we need more than one dashboard?
-   Are components that can be collapsed / expanded?
-   Titles, subtitles, labels

> **Does the organization has a particular color and layout scheme desired for the dashboards?**



# **Step 4**. Description of your app and sketch {background-color="#F1FFFA"}


---

![](img/sketch.png)


---

# App design: Some final messages

---

# **Simplicity** is gold

::: footer
[The danger of feature-creep - UX-matters - Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/ux-matters.html#the-danger-of-feature-creep)
:::


---

# UIs should be as **self-explanatory** as possible

Add labels, titles, notes for the users.

::: footer
[UX-matters - Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/ux-matters.html)
:::

---

## Rule of Least Surprise

> Rule of Least Surprise: In interface design, always do the least surprising thing.
>
> The Art of UNIX Programming (Raymond 2003)

::: footer
[UX-matters - Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/ux-matters.html)
:::

--

# Rule of Least Surprise

When we are browsing the web, **we have a series of pre-conceptions** about what things are and what they do.

. . .

For example, **we expect an underline text to be clickable**, so there is a good chance that if you use underlined text in your app, the user will try to click on it. 

::: footer
[UX-matters - Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/ux-matters.html)
:::

---

# Questions? Break!

---


# 2. How to structure the UI of your Shiny app?  {background-color="#F1FFFA"}
- [COVID-19 Tracker app](https://vac-lshtm.shinyapps.io/ncov_tracker/?_ga=2.52417641.1170288496.1676142911-1701640703.1675377384)

---

## Layouts

- **Single page layouts** `fluidPage()`
  - Page with sidebar   
    - `sidebarLayout()` 
    - `mainPanel()` 
    - `sidebarPanel()`
  - Multi-row 
    - `fluidRow()` 
    - `column()`

---

## Layouts

- **Multi-page layouts**  
  - Tabsets 
   - `tabsetPanel()`
   - `tabPanel()`
  - Navbars
   - `navbarPage()`
   - `navbarMenu()`

---

## Layout functions

![](img/layout.png)

:::footer
Shiny Cheat-sheet
:::

---

## Single page layout
#### Structure of a basic app with a sidebar

![](img/sidebar.png)

---

## Single page layout
#### The structure underlying a simple multi-row app 


![](img/multirow.png)

**Each row is made up of 12 columns** and the first argument to `column()` gives how many of those columns to occupy.

---

## NavbarPage

```{r eval=FALSE, include=TRUE}
ui <- navbarPage(
  "Page title",   
  tabPanel("panel 1", "one"),
  tabPanel("panel 2", "two"),
  tabPanel("panel 3", "three"),
  navbarMenu("subpanels", 
    tabPanel("panel 4a", "four-a"),
    tabPanel("panel 4b", "four-b"),
    tabPanel("panel 4c", "four-c")
  )
)
```



# DEMO: Sidebar, tabs and navbar {background-color="#F1FFFA"}


# 3. How to add themes and style to your Shiny app? {background-color="#F1FFFA"}

---

## Themes
#### `bslib` package

```{r eval=FALSE, include=TRUE}
fluidPage(
  theme = bslib::bs_theme(...)
)
```

---

## You can select your own theme!

Use the function `bslib::bs_theme_preview()` to define your theme interactively

```{r eval=FALSE, include=TRUE}
theme <- bslib::bs_theme(
  bg = "#0b3d91", 
  fg = "white", 
  base_font = "Source Sans Pro"
)
```

---

## Themes
#### `thematic` package

For plots you can use `thematic` package adding `thematic_shiny()` 

```{r eval=FALSE, include=TRUE}
 library(ggplot2)

ui <- fluidPage(
  theme = bslib::bs_theme(bootswatch = "darkly"),
  titlePanel("A themed plot"),
  plotOutput("plot"),
)

server <- function(input, output, session) {
  thematic::thematic_shiny()
  
  output$plot <- renderPlot({
    ggplot(mtcars, aes(wt, mpg)) +
      geom_point() +
      geom_smooth()
  }, res = 96)
}


```

---

## Learning outcomes {background-color="#FED9B7"}

1.  Recognize the importance of user center design when developing a dashboard

2.  Implement the six steps to design an app

3.  Build the user interface of a Shiny app using single and multi-page layouts

4.  Customize the Shiny app appearance using boostrap themes 

5.  Design a prototype of an app the user's needs creating personas profiles
---

# Questions?


---


![`Shinyalert` package](https://raw.githubusercontent.com/daattali/shinyalert/master/inst/img/shinyalert-basic.gif)
![Shinyalert](https://raw.githubusercontent.com/daattali/shinyalert/master/inst/img/shinyalert-basic.gif)
---

# UI Design

## Don't Rush into Coding

#### Prototyping is crucial

> Prototyping first may help keep you from investing far too much time for marginal gains.
>
> The Art of UNIX Programming (Raymond 2003) "Rule of Optimization: Prototype before polishing. Get it working before you optimize it."

::: footer
[Building an "ipsum-app" - Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/building-ispum-app.html)
:::
--

## Boostrap

**Bootstrap** is the world's most popular frontend framework, providing ready-to-use templates for css and javascript, that save developers time.

------------------------------------------------------------------------

## Boostrap grid system

The Bootstrap grid has **twelve columns**, and [six responsive tiers](https://getbootstrap.com/docs/5.1/layout/grid/#grid-options) (allowing you to specify different behaviors on different screen sizes)

```{r echo=FALSE, out.width=400, fig.align='center'}
knitr::include_graphics("img/boostrap.png")
```

::: footer
[`dash-bootstrap-components` documentation](https://dash-bootstrap-components.opensource.faculty.ai/docs/components/layout/) / [Video Charming data](https://www.youtube.com/watch?v=0mfIK8zxUds)
:::
